{"mappings":"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","sources":["src/js/scientists.js"],"sourcesContent":["const scientists = [\r\n  { name: 'Albert', surname: 'Einstein', born: 1879, dead: 1955, id: 1 },\r\n  { name: 'Isaac', surname: 'Newton', born: 1643, dead: 1727, id: 2 },\r\n  { name: 'Galileo', surname: 'Galilei', born: 1564, dead: 1642, id: 3 },\r\n  { name: 'Marie', surname: 'Curie', born: 1867, dead: 1934, id: 4 },\r\n  { name: 'Johannes', surname: 'Kepler', born: 1571, dead: 1630, id: 5 },\r\n  { name: 'Nicolaus', surname: 'Copernicus', born: 1473, dead: 1543, id: 6 },\r\n  { name: 'Max', surname: 'Planck', born: 1858, dead: 1947, id: 7 },\r\n  { name: 'Katherine', surname: 'Blodgett', born: 1898, dead: 1979, id: 8 },\r\n  { name: 'Ada', surname: 'Lovelace', born: 1815, dead: 1852, id: 9 },\r\n  { name: 'Sarah E.', surname: 'Goode', born: 1855, dead: 1905, id: 10 },\r\n  { name: 'Lise', surname: 'Meitner', born: 1878, dead: 1968, id: 11 },\r\n  { name: 'Hanna', surname: 'Hammarström', born: 1829, dead: 1909, id: 12 },\r\n];\r\n\r\nconst makeCarts = data => {\r\n  field.innerHTML = '';\r\n  data.forEach(el => injectCard(el));\r\n};\r\n\r\nconst injectCard = array => {\r\n  field.insertAdjacentHTML(\r\n    'beforeend',\r\n\r\n    `\r\n      <li class=\"scientists__item\">\r\n        <h3 class=\"scientists__item-name\">${array.name} ${array.surname}</h3>\r\n        <p class=\"scientists__item-year\">${array.born}-${array.dead}</hp>\r\n      </li>\r\n      `\r\n  );\r\n};\r\n\r\nconst btns = document.querySelectorAll('.scientists__btn');\r\nconst field = document.querySelector('.scientists__cards');\r\n\r\nmakeCarts(scientists);\r\n\r\n// sorting functions\r\n(() => {\r\n  // Які вчені народилися в 19 ст.\r\n  btns[0].onclick = () => {\r\n    field.innerHTML = '';\r\n\r\n    scientists.forEach(el => {\r\n      if (el.born.toString().slice(0, 2) == '18') {\r\n        injectCard(el);\r\n      }\r\n    });\r\n  };\r\n\r\n  // Знайти рік народження Albert Einshtein\r\n  btns[1].onclick = () => {\r\n    const albertEinstein = scientists.find(\r\n      el => el.name === 'Albert' && el.surname === 'Einstein'\r\n    );\r\n\r\n    field.innerHTML = '';\r\n    injectCard(albertEinstein);\r\n  };\r\n\r\n  // Відсортувати вчених за алфавітом\r\n  btns[2].onclick = () => {\r\n    const sortedArray = scientists.sort(\r\n      (a, b) =>\r\n        a.name.localeCompare(b.name) || a.surname.localeCompare(b.surname)\r\n    );\r\n\r\n    makeCarts(sortedArray);\r\n  };\r\n\r\n  // Знайти вчених, прізвища яких починаються на на літеру “С”\r\n  btns[3].onclick = () => {\r\n    field.innerHTML = '';\r\n    makeCarts(scientists.filter(item => item.surname[0] == 'C'));\r\n  };\r\n\r\n  // Відсортувати вчених за кількістю прожитих років\r\n  btns[4].onclick = () => {\r\n    const sortedArray = scientists.sort(\r\n      (a, b) => b.dead - b.born - (a.dead - a.born)\r\n    );\r\n\r\n    makeCarts(sortedArray);\r\n  };\r\n\r\n  // Видалити всіх вчених, ім’я яких починається на “А”\r\n  btns[5].onclick = () => {\r\n    field.innerHTML = '';\r\n    makeCarts(scientists.filter(item => item.name[0] != 'A'));\r\n  };\r\n\r\n  // Знайти вченого, який народився найпізніше\r\n  btns[6].onclick = () => {\r\n    const oldestScientist = scientists.reduce((oldest, current) => {\r\n      const oldestAge = oldest.dead - oldest.born;\r\n      const currentAge = current.dead - current.born;\r\n      return currentAge > oldestAge ? current : oldest;\r\n    });\r\n\r\n    field.innerHTML = '';\r\n    injectCard(oldestScientist);\r\n  };\r\n\r\n  // Знайти вченого, який прожив найдовше і вченого, який прожив найменше\r\n  btns[7].onclick = () => {\r\n    const longestScientist = scientists.reduce((longest, current) => {\r\n      const longestAge = longest.dead - longest.born;\r\n      const currentAge = current.dead - current.born;\r\n      return currentAge > longestAge ? current : longest;\r\n    });\r\n\r\n    const shortestScientist = scientists.reduce((shortest, current) => {\r\n      const shortestAge = shortest.dead - shortest.born;\r\n      const currentAge = current.dead - current.born;\r\n      return currentAge < shortestAge ? current : shortest;\r\n    });\r\n\r\n    field.innerHTML = '';\r\n\r\n    injectCard(longestScientist);\r\n    injectCard(shortestScientist);\r\n  };\r\n\r\n  // Знайти вчених, в яких співпадають перші літери імені і прізвища\r\n  btns[8].onclick = () => {\r\n    const sameFirstLetter = scientists.filter(\r\n      item => item.name[0] === item.surname[0]\r\n    );\r\n\r\n    field.innerHTML = '';\r\n    makeCarts(sameFirstLetter);\r\n  };\r\n})();\r\n"],"names":["$3a6a86c8592ab641$var$scientists","name","surname","born","dead","id","$3a6a86c8592ab641$var$makeCarts","data","$3a6a86c8592ab641$var$field","innerHTML","forEach","el","$3a6a86c8592ab641$var$injectCard","array","insertAdjacentHTML","$3a6a86c8592ab641$var$btns","document","querySelectorAll","querySelector","onclick","toString","slice","albertEinstein","find","sortedArray","sort","a","b","localeCompare","filter","item","oldestScientist","reduce","oldest","current","oldestAge","longestScientist","longest","longestAge","shortestScientist","shortest","shortestAge"],"version":3,"file":"index.d6e1394f.js.map"}